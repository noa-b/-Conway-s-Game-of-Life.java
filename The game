import javax.swing.*;
import java.awt.*;
import java.util.Random;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MyPanel extends JPanel implements ActionListener {

    public static final int SCREEN_WIDTH = 800;
    public static final int SCREEN_HEIGHT = 400;
    private final Timer timer;
    private int[][] cells;
    private int[][] nextGen;
    private final int rows = 25;
    private final int columns = (rows * SCREEN_WIDTH) / SCREEN_HEIGHT;
    private int genCounter;

    public MyPanel() {
      this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
      this.timer = new Timer(900, this);

      this.cells = new int[rows][columns];
      this.nextGen = new int[rows][columns];
      this.genCounter = 0;

      Random r = new Random();
/*
    -------------------------------------------
     0 in the cells array means the cell is dead and 1 is alive.
     generation 0. initializing randomly 1 and 0 for each cell
*/

    int i = 0;
    double alivePercent = 33.333;
    int ones_initial = (int) Math.round(rows*columns / (100 / alivePercent));

    while(i < ones_initial) {

      int random_num_row = r.nextInt(rows);
      int ran_num_column = r.nextInt(columns);

      if (cells[random_num_row][ran_num_column] == 0) {
        cells[random_num_row][ran_num_column] = 1;
        i += 1;
      }
    }
      
      generation(nextGen);

      timer.start();
    }

    public void paintComponent(Graphics g) {
      super.paintComponent(g);
      
      int rectHeight = SCREEN_HEIGHT / rows;
      int rectWidth = SCREEN_WIDTH / columns;


      for(int i = 0; i < rows; i++) { // i = {0, 1, 2, ... rows - 1}
        for(int j = 0; j < columns; j++) { // j = {0, 1, 2, ..., columns - 1}
          if (cells[i][j] == 1) {
            g.setColor(Color.black);
            g.fillRect(j * rectWidth, i * rectHeight, rectWidth, rectHeight);
          }
           else if (nextGen[i][j] == 1) {
            g.setColor(new Color(6, 145,8));
            g.fillRect(j * rectWidth, i  * rectHeight, rectWidth, rectHeight);
          }
        }
      }
    
    //horizontal lines
    g.setColor(Color.white);
    for(int i = 0; i < rows; i++) {
      g.drawLine(0, i * rectHeight, SCREEN_WIDTH, i * rectHeight);
    }

    //vertical line
    for(int j = 0; j < columns; j++) {
      g.drawLine(j * rectWidth , 0 , j * rectWidth , SCREEN_HEIGHT);
    } 

    g.setColor(Color.black);
    g.drawString("generaion:" + genCounter, 0, SCREEN_HEIGHT - 15);

  }

  public int countNeighbors(int y, int x) {

    int livingNeighbors = 0;

    for(int i = y - 1; i < y + 2; i++) {
      for(int j = x - 1 ; j < x + 2; j++) {
 
        if(x == j && y == i) {
          continue;
        }

        else {
          if(i < rows && j < columns && i >= 0 && j >= 0) {
              // i and j are in the bounderies of cells.
            if(cells[i][j] == 1) // the cell is alive
              livingNeighbors++;
          }
        }
      }
    }
     
    return livingNeighbors; 
  }

  public int lifeCalculator(boolean isAlive, int livingNeighbors) {
    //is_alive --> boolean type, living_neighbors --> integer
    if (isAlive && (livingNeighbors > 3 || livingNeighbors <= 1)) {
      return 0;
    }
    else if(!isAlive && livingNeighbors == 3) {
      return 1;
    }
    else {
      if(isAlive) {
        return 1;
      }
      else {
        return 0;
      }
    }
  }

  public void generation(int[][] target) {
    for(int i = 0; i < rows; i++) {
      for(int j = 0; j < columns; j++) {
        target[i][j] = lifeCalculator(cells[i][j] == 1, countNeighbors(i, j));
      }
    }
  }

  public void copy2DArrToOther(int[][] original, int[][] target) {
    for(int i = 0; i < rows; i++) {
      for(int j = 0; j < columns; j++) {
        target[i][j] = original[i][j];
      }
    }
  }
      
    @Override
    public void actionPerformed(ActionEvent e) {
      
      copy2DArrToOther(nextGen, cells);
      generation(nextGen);
      genCounter++;

      repaint();
    }
}
